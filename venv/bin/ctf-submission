#!/home/benya/Documents/Workbench/admincrashboard/venv/bin/python3

import asyncore
import argparse
import logging
import re
import socket

import psycopg2

from ctf_gameserver.lib import daemon
from ctf_gameserver.lib.args import get_arg_parser_with_db
from ctf_gameserver.submission import flagserver


def main():
    logging.basicConfig(format='%(asctime)s %(levelname)s(%(name)s): %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S')

    parser = get_arg_parser_with_db('CTF Gameserver flag submission server')
    parser.add_argument('-l', '--listen', type=str, default="localhost",
                        help='address or hostname to listen on')
    parser.add_argument('-p', '--port', type=int, default="6666",
                        help="Port to listen on")
    parser.add_argument('--secret', type=str, required=True,
                        help="base64 random string consistent with checkers")
    parser.add_argument('--teamregex', type=str, required=True,
                        help='Python regex to extract the team ID, must '
                             'contain a match group for the team ID')
    args = parser.parse_args()

    team_regex = re.compile(args.teamregex)

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    logging.debug("connecting to database")
    dbconnection = psycopg2.connect(host=args.dbhost,
                                    database=args.dbname,
                                    user=args.dbuser,
                                    password=args.dbpassword)

    with dbconnection:
        with dbconnection.cursor() as cursor:
            cursor.execute('''SELECT competition_name, start, "end", valid_ticks, tick_duration, flag_prefix
                              FROM scoring_gamecontrol''')
            contestname, conteststart, contestend, flagvalidity, tickduration, flagprefix = cursor.fetchone()

    logging.debug("Starting asyncore")

    for family in (socket.AF_INET6, socket.AF_INET):
        try:
            flagserver.FlagServer(family, args.listen, args.port,
                                  dbconnection, args.secret, contestname, conteststart,
                                  contestend, flagvalidity, tickduration,
                                  flagprefix, team_regex)
            break
        except socket.gaierror as e:
            if e.errno != socket.EAI_ADDRFAMILY:
                raise

    daemon.notify("READY=1")

    asyncore.loop()


if __name__ == '__main__':
    main()
